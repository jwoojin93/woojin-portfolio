/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 -t -s ./macbook_laptop.gltf 
Author: Issac Ghazanfar (https://sketchfab.com/sheshhh)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/macbook-laptop-7ceb46a1425b475fa7f6bf192e01ed74
Title: MacBook Laptop
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame, useLoader } from "@react-three/fiber";
import { damp3 } from "maath/easing";
import { useRef } from "react";

type GLTFResult = GLTF & {
  nodes: {
    Cube_Material004_0: THREE.Mesh;
    Cube_Material002_0: THREE.Mesh;
    Cube_Material003_0: THREE.Mesh;
    Keyboard_Material001_0: THREE.Mesh;
    Cube002_Material002_0: THREE.Mesh;
    Cube001_Material002_0: THREE.Mesh;
  };
  materials: {
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

export function MacbookLaptopModel(props: JSX.IntrinsicElements["group"]) {
  const cameraGroupRef = useRef<THREE.Group>(null);

  useFrame(({ camera }, delta) => {
    let targetPosition: [x: number, y: number, z: number] = [0, 0, 6.5];
    damp3(camera.position, targetPosition, 0, delta);
    cameraGroupRef.current!.rotation.y += 0.01;
  });

  const { nodes, materials } = useGLTF(
    "/model/macbook_laptop.gltf"
  ) as GLTFResult;

  const displayMap = useLoader(
    THREE.TextureLoader,
    "/texture/Material.003_baseColor.png"
  );

  const keyboardMap = useLoader(
    THREE.TextureLoader,
    "/texture/Material.001_baseColor.jpeg"
  );
  return (
    <group ref={cameraGroupRef} {...props} dispose={null}>
      <group scale={0.07}>
        <group
          rotation={[Math.PI, 0, 0]}
          scale={[9.059, 7.172, 9.059]}
          position={[0, -10, 0]}
        >
          <group
            position={[0.001, -1.421, 1.468]}
            rotation={[1.386, 0, 0]}
            scale={[11.038, 11.143, 13.86]}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube_Material004_0.geometry}
              material={materials["Material.004"]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube_Material002_0.geometry}
              material={materials["Material.002"]}
            />
            {/* 화면 */}
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cube_Material003_0.geometry}
              material={materials["Material.003"]}
            >
              <meshStandardMaterial map={displayMap} />
            </mesh>
          </group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube001_Material002_0.geometry}
            material={materials["Material.002"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Keyboard_Material001_0.geometry}
            material={materials["Material.001"]}
            position={[0.024, -0.032, 0.48]}
            rotation={[Math.PI / 2, 0, 0]}
            scale={[0.976, 0.976, 0.978]}
          >
            <meshStandardMaterial map={keyboardMap} />
          </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube002_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[-0.01, -0.047, -0.739]}
            rotation={[Math.PI / 2, 0, 0]}
            scale={[1.035, 0.972, 0.968]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/model/macbook_laptop.gltf");
