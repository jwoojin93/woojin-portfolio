/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 -t -s ./airplane.gltf 
Author: Gilberto (https://sketchfab.com/Gilhhjm)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/emb-314-super-tucano-a29b-ad14e4e33ac4482998784249bb11d7f8
Title: EMB-314 Super Tucano A29B
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame, useLoader } from "@react-three/fiber";
import { damp3 } from "maath/easing";
import { useRef } from "react";

type GLTFResult = GLTF & {
  nodes: {
    A29_Model006_Texture_A29_0: THREE.Mesh;
    A29_Model001_Texture_A29_0: THREE.Mesh;
    A29_Model005_Texture_A29_0: THREE.Mesh;
    A29_Model002_Texture_A29_0: THREE.Mesh;
    A29_Model003_Texture_A29_0: THREE.Mesh;
    A29_Model004_Texture_A29_0: THREE.Mesh;
  };
  materials: {
    Texture_A29: THREE.MeshStandardMaterial;
  };
};

export function AirplaneModel(props: JSX.IntrinsicElements["group"]) {
  const cameraGroupRef = useRef<THREE.Group>(null);

  useFrame(({ camera, pointer }, delta) => {
    let targetPosition: [x: number, y: number, z: number] = [0, 0, 22]; // 삼항 연산자는 깨끗한 코드의 옵션이 아닙니다
    damp3(camera.position, targetPosition, 0, delta);
    cameraGroupRef.current!.rotation.y += 0.001;
    cameraGroupRef.current!.rotation.x += 0.001;
    cameraGroupRef.current!.rotation.z += 0.01;
  });
  const { nodes, materials } = useGLTF("/model/airplane.gltf") as GLTFResult;

  const baseColorMap = useLoader(
    THREE.TextureLoader,
    "/texture/airplane/baseColor.png"
  );

  const metallicRoughnessMap = useLoader(
    THREE.TextureLoader,
    "/texture/airplane/metallicRoughness.png"
  );

  const normalMap = useLoader(
    THREE.TextureLoader,
    "/texture/airplane/normal.png"
  );
  return (
    <group ref={cameraGroupRef} {...props} dispose={null}>
      <group scale={0.01}>
        {/* 바퀴 */}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.A29_Model006_Texture_A29_0.geometry}
          material={materials.Texture_A29}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <meshStandardMaterial
            map={baseColorMap}
            normalMap={normalMap}
            metalnessMap={metallicRoughnessMap}
            roughnessMap={metallicRoughnessMap}
          />
        </mesh>
        {/* 몸통 */}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.A29_Model001_Texture_A29_0.geometry}
          material={materials.Texture_A29}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <meshStandardMaterial
            map={baseColorMap}
            normalMap={normalMap}
            metalnessMap={metallicRoughnessMap}
            roughnessMap={metallicRoughnessMap}
          />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.A29_Model005_Texture_A29_0.geometry}
          material={materials.Texture_A29}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <meshStandardMaterial
            map={baseColorMap}
            normalMap={normalMap}
            metalnessMap={metallicRoughnessMap}
            roughnessMap={metallicRoughnessMap}
          />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.A29_Model002_Texture_A29_0.geometry}
          material={materials.Texture_A29}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <meshStandardMaterial
            map={baseColorMap}
            normalMap={normalMap}
            metalnessMap={metallicRoughnessMap}
            roughnessMap={metallicRoughnessMap}
          />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.A29_Model003_Texture_A29_0.geometry}
          material={materials.Texture_A29}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <meshStandardMaterial
            map={baseColorMap}
            normalMap={normalMap}
            metalnessMap={metallicRoughnessMap}
            roughnessMap={metallicRoughnessMap}
          />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.A29_Model004_Texture_A29_0.geometry}
          material={materials.Texture_A29}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <meshStandardMaterial
            map={baseColorMap}
            normalMap={normalMap}
            metalnessMap={metallicRoughnessMap}
            roughnessMap={metallicRoughnessMap}
          />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("/model/airplane.gltf");
